Sierra Wireless swi-s6 Board Support Package


Table of Contents
=================

1. Introductions
2. Supported Boards
3. Dependencies
4. Patches
5. BSP Features
6. BSP Usage Notes


1. Introductions
================

The swi-s6 board mainly contains an S6 chip, which is comprised of an
application processor (an ARM926 processor), a GSM/GPRS/EDGE modem (also
an ARM926 processor) and a Cortex-M0 processor. This BSP runs on the
application processor and drives the peripherals of application processor
and Cortex-M0.


2. Supported Boards
===================

This BSP is developed under following hardware environment:

  + SierraWireless AR6330 socket board + Dev Kit mother board

Adjustment may be needed if run the bsp on other variants of swi-s6
related boards.


3. Dependencies
===============

This layer depends on:

URI: git://git.yoctoproject.org/poky.git
branch: dylan(1.4)

URI: git://git.openembedded.org/meta-openembedded
branch: dylan


4. Patches
==========

Please submit any patches against this BSP to the Yocto mailing list
(yocto@yoctoproject.org) and cc to the maintainers.

Maintainers:
	Liming Wang <liming.wang@windriver.com>
	Pengyu Ma <pengyu.ma@windriver.com>


5. BSP Features
===============

5.1 Supported Features
----------------------

The following BSP features are validated and supported on boards where
the corresponding h/w features exist.

  o General Serial Bus Interface
	+ UART: 8250 compatible
	+ I2C Master
	+ I2C SLAVE
	+ SPI Master

  o USB Controller
	+ High Speed USB Device Controller

  o USB Gadget(USB Device Controller functions)
	+ CDC-ACM
	+ CDC-ECM
	+ Storage

  o Network
	+ ASIX AX88796C Ethernet Controller

  o Storage
	+ NOR Flash: 32M Nor Flash
	+ SD/MMC: On-Chip Arasan MMC/SD/SDIO controller

  o Misc Devices
	+ GPIO: On-Chip general purpose I/O peripheral
	+ KEYPAD: On-Chip keypad controller

  o Debug Features
	+ gdbserver
	+ lttng
	+ strace
	+ kgdboc

  o Kernel Features
	+ preempt-rt


5.2 Unvalidated Features
------------------------

The following features are not validated:

	x High Speed USB Host Controller
	x High Speed OTG Host Controller


6. BSP Usage Notes
==================

6.1 Build instructions
----------------------

The BSP follows standard yocto build instructions, refer to
yocto documents if you get any trouble:
https://www.yoctoproject.org/documentation

To facilitate your job, a build script(build.sh) is also provided,
please read README.build for more information.


6.2 Boot methods
----------------

The board uses u-boot as bootloader. To boot the kernel correctly, the Nor flash
should be burded by the steps in README.install at flash.

After burding flash, then configure u-boot with target IP, tftp
server, netmask and other required network values:

 u-boot> setenv ipaddr <target IP>
 u-boot> setenv serverip <nfs server IP>
 u-boot> setenv gatewayip <gateway IP>
 u-boot> setenv netmask <netmask>
 u-boot> setenv rootpath <nfs root>
 u-boot> tftp "/<tftp root>/uImage"
 u-boot> setenv bootargs mem=48M console=ttyS0,115200 root=/dev/nfs rw \
          nfsroot=$(serverip):$(rootpath) \
          ip=$(ipaddr)::$(gatewayip):$(netmask)::eth0:off
 u-boot> bootm

6.3 Rootfs methods
------------------

The Nor flash "NOR for JFFS2 partition 1" partition, MMC and NFS
can be used as rootfs.


6.3.1 Nor flash
---------------

The kernel uses Nor flash "NOR for JFFS2 partition 1" partion as rootfs by default.
Use Nor flash as rootfs with following kernel parameters:

  mem=48M console=ttyS0,115200 root=/dev/mtdblock0 rw rootfstype=jffs2

mtdblock0 is used as the rootfs, so be sure the rootfs has
been burnt into flash before boot the kernel.

Note: the "NOR for JFFS2 partition 1" partition size is very small, if your
rootfs is too large, this method will not work.


6.3.2 MMC
---------

Use MMC as rootfs with following kernel parameters:

  mem=48M console=ttyS0,115200 root=/dev/mmcblk0p1 rw rootwait

As the example shown above, the first MMC card detected by linux is
used as the device having rootfs, and the first partition inside it is used
as rootfs.

Rebuild the bsp, and unzip your rootfs into a mmc card on the host:
  $ sudo tar -xjvf <build_dir>/tmp/deploy/images/core-image-minimal-dev-swi-s6.tar.bz2 -C /media/mmc
   (assume the mmc card is mounted at /media/mmc on your host)
  $ sudo umount /media/mmc

Unplug the mmc from host, insert it into the target and boot target up.
In this case MMC will be used as rootfs.


6.3.4 NFS
---------

Using NFS as rootfs with this kernel parameter:

  root=/dev/nfs rw nfsroot=<nfs_server_ip>:<path_to_rootfs> ip=dhcp

For example:

  mem=48M console=ttyS0,115200 root=/dev/nfs rw \
    nfsroot=192.168.0.1:/export/pxeboot/boards/rootfs ip=dhcp

As the example shown above, nfs server locates at 192.168.0.1, and the
exported mount point via nfs locates /export/pxeboot/boards/rootfs.


6.4 Features Verification
-------------------------

For details about features test steps/report, please refer to
SWI-S6_Yocto_BSP_Test_Reports_Windriver.xls
