From b3fafc5d793ddd4ed006133e18445350e2b0ee71 Mon Sep 17 00:00:00 2001
From: Jin Li <jin.li@windriver.com>
Date: Wed, 20 Jun 2012 14:18:11 +0800
Subject: [PATCH] Add wr-runposix, failtest and skiptest to wrLinux_posix

    CQID: WIND00325893

The wr-runposix is a wrapper of Posix execution script run-tests.sh.

The wr-runposix is created to give more flexibility to Posix automation test
such as running selected test case or resume unfinished Posix test.

Enhanced Function:

1. Run selected test suite
2. Run selected test case

3. filter fail test case and give known fail reason
The failtest data base is used by wr-runposix to create failed test case report. Each
known failed case will be followed with failure reason.

4. Skip non-supported test case
It is a brand new function to skip non-supported test case. The skiptest data base
include the non-supported test case file. Based on this data base, wr-runltp
will skip non-supported test case automatically at runtime.

Signed-off-by: Jin Li <jin.li@windriver.com>
---
 .../wrLinux_posix/failtest/common                  |  36 ++
 .../wrLinux_posix/skiptest/common                  |  88 +++++
 .../open_posix_testsuite/wrLinux_posix/wr-runposix | 384 +++++++++++++++++++++
 3 files changed, 508 insertions(+)
 create mode 100644 testcases/open_posix_testsuite/wrLinux_posix/failtest/common
 create mode 100644 testcases/open_posix_testsuite/wrLinux_posix/skiptest/common
 create mode 100755 testcases/open_posix_testsuite/wrLinux_posix/wr-runposix

diff --git a/testcases/open_posix_testsuite/wrLinux_posix/failtest/common b/testcases/open_posix_testsuite/wrLinux_posix/failtest/common
new file mode 100644
index 0000000..84f4dc0
--- /dev/null
+++ b/testcases/open_posix_testsuite/wrLinux_posix/failtest/common
@@ -0,0 +1,36 @@
+
+# Copyright (c) 2012 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+
+Test Suit -- conformance/interfaces TMR
+---------------------------------------
+
+#std conformance/interfaces/timer_getoverrun 2-2.runtest | performance issue WIND00310571
+#std conformance/interfaces/timer_getoverrun 2-3.runtest | performance issue CQ:WIND00310571
+#std conformance/interfaces/timer_gettime 1-3.runtest | performance issue CQ:WIND00310571
+
+Test Suit -- conformance/interfaces MSG
+---------------------------------------
+
+#preempt_rt conformance/interfaces/mq_timedreceive 5-1.runtest | preempt_rt issue WIND00323712
+#preempt_rt conformance/interfaces/mq_timedsend    5-2.runtest | preempt_rt issue WIND00323712
+
+Test Suit -- conformance/interfaces MEM
+---------------------------------------
+
+#std conformance/interfaces/mmap 24-2.runtest | WIND00310801
+#std conformance/interfaces/mmap 13-1.runtest | time fields limitation on NFS
+Not all of the Linux filesystems implement all of the time fields. Some file
+system types allow mounting in such a way that file accesses do not cause an
+update of the st_atime field, also see 'noatime' in mount(8).
+
+
+Test Suit -- conformance/interfaces THR
+---------------------------------------
+
+#std conformance/interfaces/pthread_cond_signal 1-1.runtest | performance issue WIND00310571
+
+
diff --git a/testcases/open_posix_testsuite/wrLinux_posix/skiptest/common b/testcases/open_posix_testsuite/wrLinux_posix/skiptest/common
new file mode 100644
index 0000000..b283cd4
--- /dev/null
+++ b/testcases/open_posix_testsuite/wrLinux_posix/skiptest/common
@@ -0,0 +1,88 @@
+
+# Copyright (c) 2012 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+
+
+Test Suit -- conformance/interfaces TMR
+---------------------------------------
+#std conformance/interfaces/timer_create 10-1.run-test | To be added
+#std conformance/interfaces/timer_create 11-1.run-test | To be added
+#std conformance/interfaces/clock_getcpuclockid 2-1.run-test | To be added
+
+Test Suit -- conformance/interfaces AIO
+---------------------------------------
+
+#std conformance/interfaces/aio_cancel 3-1.run-test | To be added
+#std conformance/interfaces/aio_error 3-1.run-test | To be added
+#std conformance/interfaces/aio_suspend 1-1.run-test | To be added
+#std conformance/interfaces/aio_suspend 4-1.run-test | To be added
+#std conformance/interfaces/aio_suspend 7-1.run-test | To be added
+#std conformance/interfaces/aio_suspend 8-1.run-test | To be added
+#std conformance/interfaces/aio_suspend 9-1.run-test | To be added
+#std conformance/interfaces/aio_read 10-1.run-test | To be added
+#std conformance/interfaces/aio_return 2-1.run-test | To be added
+#std conformance/interfaces/aio_return 3-2.run-test | To be added
+#std conformance/interfaces/aio_return 4-1.run-test | To be added
+#std conformance/interfaces/aio_write 8-1.run-test | To be added
+#std conformance/interfaces/aio_write 8-2.run-test | To be added
+#std conformance/interfaces/lio_listio 2-1.run-test | To be added
+#std conformance/interfaces/lio_listio 11-1.run-test | To be added
+#std conformance/interfaces/lio_listio 14-1.run-test | To be added
+
+Test Suit -- conformance/interfaces MSG
+---------------------------------------
+#std conformance/interfaces/mq_open 16-1.run-test | To be added
+#std conformance/interfaces/mq_send 5-1.run-test | To be added
+#std conformance/interfaces/timedsend 5-1.run-test | To be added
+#preempt_rt conformance/interfaces/mq_timedreceive 5-2.run-test | To be added
+The time() can not specifies an abs_timeout to mq_timedreceiver () for preempt_rt kernel
+
+#preempt_rt conformance/interfaces/mq_timedreceive 10-2.run-test | To be added
+kernel implementation-defined
+
+#std conformance/interfaces/mq_unlink/speculative 7-2.run-test | To be added
+
+Test Suit -- conformance/interfaces MEM
+---------------------------------------
+
+#std conformance/interfaces/mmap 11-4.run-test | To be added
+#std conformance/interfaces/mmap 11-5.run-test | To be added
+#std conformance/interfaces/mmap 18-1.run-test | To be added
+#std conformance/interfaces/mmap 23-1.run-test | To be added
+#std conformance/interfaces/mmap 28-1.run-test | To be added
+#std conformance/interfaces/mmap 31-1.run-test | To be added
+#std conformance/interfaces/mlock/speculative 12-1.run-test | To be added
+
+Test Suit -- conformance/interfaces THR
+---------------------------------------
+
+#std conformance/interfaces/pthread_attr_setschedparam/speculative 3-1.run-test | To be added
+#std conformance/interfaces/pthread_attr_setschedparam/speculative 3-2.run-test | To be added
+#std conformance/interfaces/pthread_mutexattr_gettype/speculative 3-1.run-test | To be added
+#std conformance/interfaces/pthread_rwlock_rdlock 2-1.run-test | To be added
+#std conformance/interfaces/pthread_rwlock_rdlock 2-2.run-test | To be added
+#std conformance/interfaces/pthread_rwlock_unlock 3-1.run-test | To be added
+#cgl conformance/interfaces/pthread_create 1-6.run-test | To be added
+#preempt_rt conformance/interfaces/pthread_create 1-6.run-test | To be added
+
+Test Suit -- conformance/interfaces SIG
+---------------------------------------
+
+#std conformance/interfaces/sigaction 10-1.run-test | To be added
+#std conformance/interfaces/sigset 8-1.run-test | To be added
+
+Test Suit -- conformance/interfaces TPS
+---------------------------------------
+
+#std conformance/interfaces/sched_getparam 6-1.run-test | To be added
+#std conformance/interfaces/sched_getscheduler 7-1.run-test | To be added
+#cgl-preempt_rt conformance/interfaces/sched_setparam 9-1.run-test | To be added
+#cgl-preempt_rt conformance/interfaces/sched_setparam 10-1.run-test | To be added
+#cgl-preempt_rt conformance/interfaces/sched_yield 1-1.run-test | To be added
+#preempt_rt conformance/interfaces/sched_setparam 9-1.run-test | To be added
+#preempt_rt conformance/interfaces/sched_setparam 10-1.run-test | To be added
+#preempt_rt conformance/interfaces/sched_yield 1-1.run-test | To be added
+
diff --git a/testcases/open_posix_testsuite/wrLinux_posix/wr-runposix b/testcases/open_posix_testsuite/wrLinux_posix/wr-runposix
new file mode 100755
index 0000000..fd6f8ff
--- /dev/null
+++ b/testcases/open_posix_testsuite/wrLinux_posix/wr-runposix
@@ -0,0 +1,384 @@
+#! /bin/sh
+
+# Copyright (c) 2012 Wind River Systems, Inc.
+#
+# The right to copy, distribute, modify, or otherwise make use
+# of this software may be licensed only pursuant to the terms
+# of an applicable Wind River license agreement.
+
+# Set up the proper environment for test environment
+
+cd `dirname $0` || \
+{
+    echo "FATAL: unable to change directory to $(dirname $0)"
+    exit 1
+}
+export WRPOSIXROOT=${PWD}
+export POSIXROOT=$(dirname $WRPOSIXROOT)
+
+BASEDIR="$POSIXROOT/conformance/interfaces"
+EXECUTION_TIME=`date +"%Y_%b_%d-%Hh_%Mm_%Ss"`
+START_TIME=`date`
+LOGPATH="$WRPOSIXROOT/results"
+SKIP_PATH="$WRPOSIXROOT/skiptest"
+FAIL_PATH="$WRPOSIXROOT/failtest"
+RUNTIME_PATH="$WRPOSIXROOT/runtime"
+RUNTIME_TMP_PATH=/tmp
+
+POSIX_LOGFILE="$LOGPATH/POSIX_RUN_ON-$EXECUTION_TIME.log"
+FAIL_REPORT="$LOGPATH/failtest-$EXECUTION_TIME.report"
+SKIP_REPORT="$LOGPATH/skiptest-$EXECUTION_TIME.report"
+RUNTIME_SKIPFILE="$RUNTIME_PATH/runtime.skip"
+RUNTIME_LOGFILE="$RUNTIME_PATH/runtime.log"
+RESUME_LOGFILE="$RUNTIME_PATH/resume.log"
+SKIPTEST="$RUNTIME_PATH/skiptest"
+tmpfile="$RUNTIME_TMP_PATH/ltp_tmp"
+RUNTIME_TESTFILE="$RUNTIME_PATH/testfile"
+
+SCENARIO_GROUP_LIST="AIO,MEM,MSG,SEM,SIG,THR,TMR,TPS"
+TESTSUITE_LIST=""
+KERNEL_ARCH=""
+
+RUN_SELECTED_SUITE=0
+RUN_SELECTED_CASE=0
+RUN_RESUME_TEST=0
+RIGHT_SUITE=0
+UNKNOWN_FAILURE=0
+
+usage()
+{
+    cat <<EOF
+
+    Usage:         $(basename "$0") [ -f group ] [ -s suite [-t case] ] -R -h
+
+-f group1,group2   Scenario group such as AIO,MEM,MSG,SEM,SIG,THR,TMR,TPS
+-s suite1,suit2    Test suite under conformance/interfaces/
+-t test1,test2     Test case in the selected test suite
+-h                 Help. Prints all available options.
+-R                 Continue the remaining POSIX test after rebooting
+
+    Note:          Only one test suite under conformance/interfaces/ can be
+                   selected when specail test is specified with the "-t" option
+EOF
+}
+
+# Check the input parameter
+check()
+{
+    WRONG_SUITE=0
+    if [ "$RUN_SELECTED_SUITE" -eq 1 ];then
+        for suite in `echo $TESTSUITE_LIST |  tr ',' ' '`; do
+            ls $BASEDIR/$suite | grep -q "run.sh" || WRONG_SUITE=1;break
+        done
+    fi
+    if [ "$WRONG_SUITE" -eq 1 ]; then
+        echo "FATAL: unknown test suite name"
+        usage
+        exit 1
+    fi
+    if [ "$RUN_SELECTED_SUITE" -eq 1 -a "$RUN_SELECTED_CASE" -eq 1 ];then
+        if echo $TESTSUITE_LIST | grep -q "," ; then
+            echo "FATAL: can only run selected test case under one test suite"
+            usage
+            exit 1
+        fi
+    fi
+}
+
+# Create WRPOSIX runtime environment
+setup()
+{
+
+    [ -d "$RUNTIME_PATH" ] || mkdir $RUNTIME_PATH
+    [ -d "$LOGPATH" ] || mkdir $LOGPATH
+
+    uname -a|grep -q "preempt_rt" && KERNEL_ARCH=preempt_rt
+    uname -a|grep -q "cgl$" && KERNEL_ARCH=cgl
+
+    # Create runtime test suite list based on scenario group list
+
+if [ "$RUN_RESUME_TEST" -eq 0 ]; then
+
+    # Before start a fresh POSIX execution, delete the obsolete runtime file
+    [ -f "$RUNTIME_LOGFILE" ] && rm $RUNTIME_LOGFILE
+    [ -f "$RESUME_LOGFILE" ] && rm $RESUME_LOGFILE
+    [ -f "$RUNTIME_SKIPFILE" ] && rm $RUNTIME_SKIPFILE
+    [ -f "$RUNTIME_TESTFILE" ] && rm $RUNTIME_TESTFILE
+    [ -f "$SKIPTEST" ] && rm $SKIPTEST
+
+    if [ "$RUN_SELECTED_SUITE" -eq 0 ]; then
+
+        for group in `echo "$SCENARIO_GROUP_LIST" | tr ',' ' '`; do
+
+            case $group in
+            AIO)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/aio_*"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/lio_listio"
+                ;;
+            SIG)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/sig*"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/raise"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/kill"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/killpg"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/pthread_kill"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/pthread_sigmask"
+                ;;
+            SEM)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/sem*"
+                ;;
+            THR)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/pthread_*"
+                ;;
+            TMR)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/time*"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/*time"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/clock*"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/nanosleep"
+                ;;
+            MSG)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/mq_*"
+                ;;
+            TPS)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/*sched*"
+                ;;
+            MEM)
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/m*lock*"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/m*map"
+                TESTSUITE_LIST="$TESTSUITE_LIST $BASEDIR/shm_*"
+	        ;;
+            *)
+                usage
+                exit 1
+                ;;
+            esac
+        done
+    else
+        for suite in `echo "$TESTSUITE_LIST" | tr ',' ' '`; do
+            suite_list="$suite_list $BASEDIR/$suite"
+        done
+        TESTSUITE_LIST="$suite_list"
+    fi
+
+    # Create runtime test execution file based on test suite list
+    if [ "$RUN_SELECTED_CASE" -eq 0 ]; then
+
+        for suite in $TESTSUITE_LIST; do
+            for test_script in $(find $suite -name run.sh);do
+                for i in `seq $(cat $test_script | grep -v "^#" | xargs -n 1 | wc -l)`;do
+                    [ $i -gt 2 ] && \
+                    cat $test_script | awk "{print \$2,\$$i}" | \
+                    sed "/^ $/d" >> $RUNTIME_TESTFILE
+                done
+            done
+        done
+    else
+        TESTSUITE_LIST=$(echo $TESTSUITE_LIST | sed "s/\/opt\/ltp\/testcases\/open_posix_testsuite\///")
+        for testcase in `echo "$TESTCASE_LIST" | tr ',' ' '`; do
+            echo "$TESTSUITE_LIST $testcase" >> $RUNTIME_TESTFILE
+        done
+    fi
+
+    # Create runtime skipping test file based on processor arch and kernel type
+    echo "POSIX Test Start Time: $START_TIME" > $SKIPTEST
+    echo "-------------------------------------------" >> $SKIPTEST
+    printf "%-60s %-21s %s \n" Testcase Type "Skip Reason" >> $SKIPTEST
+    printf "%-60s %-21s %s \n" -------- ----  -----------  >> $SKIPTEST
+
+    cat $RUNTIME_TESTFILE | while read line
+    do
+        skip_suite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{print $3}')
+        skip_subsuite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{print $4}')
+        [ -n "$skip_subsuite" ] && skip_suite="$skip_suite/$skip_subsuite"
+        skip_test=$(echo "$line" | awk '{print $2}')
+        skip_reason=$(cat $SKIP_PATH/common | grep "^#std .*$skip_suite $skip_test" | cut -d "|" -f 2)
+        [ -z "$skip_reason" -a -n "$KERNEL_ARCH" ] && \
+        skip_reason=$(cat $SKIP_PATH/common | grep "^#$KERNEL_ARCH .*$skip_suite $skip_test" | cut -d "|" -f 2)
+        touch $RUNTIME_SKIPFILE
+        if [ -n "$skip_reason" ]; then
+            printf "%-60s %-20s %s \n" "$skip_suite $skip_test" SKIP "$skip_reason" >> $SKIPTEST
+            echo "$skip_suite $skip_test" >> $RUNTIME_SKIPFILE
+        fi
+    done
+
+else
+    # When it is NOT a fresh POSIX execution, use the existing runtime file
+    if [ ! -f "$RUNTIME_LOGFILE" -o ! -f "$RUNTIME_TESTFILE" ]; then
+        echo "FATAL: There is NO enough runtime file to resume POSIX execution"
+        exit 1
+    fi
+    if [ ! -f "$SKIPTEST" -o ! -f "$RUNTIME_SKIPFILE" ]; then
+	echo "FATAL: There is NO enough runtime file to resume POSIX execution"
+        exit 1
+    fi
+
+    if grep "POSIX Test Finish" $RUNTIME_LOGFILE >/dev/null 2>&1; then
+        echo "FATAL: last POSIX execution has been finished."
+        exit 1
+    fi
+
+    # Find out the test case before system panic
+    lastlog=$(cat $RUNTIME_LOGFILE | grep "execution" | tail -n 1)
+    last_suite=$(echo "$lastlog" | awk '{print $1}' | awk -F"/" '{printf $3}')
+    last_subsuite=$(echo "$lastlog" | awk '{print $1}' | awk -F"/" '{printf $4}')
+    last_test=$(echo "$lastlog" | awk '{print $1}' | awk -F"/" '{printf $5}')
+
+    if [ -n "$last_test" ]; then
+        last_suite="$last_suite/$last_subsuite"
+    else
+        last_test="$last_subsuite"
+    fi
+    last_test=$(echo $last_test | tr -d ":")
+
+    # Find out the test case which make system panic
+    find_panic=0
+    while read line
+    do
+        [ "$find_panic" -eq 1 ] && break
+        echo $line | grep -q "$last_suite $last_test" && find_panic=1
+    done < $RUNTIME_TESTFILE
+    [ "$find_panic" -eq 0 ] && echo "fail to find panic test" && exit 1
+
+    panic_suite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{printf $3}')
+    panic_subsuite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{printf $4}')
+    panic_test=$(echo "$line" | awk '{print $2}')
+    [ -n "$panic_subsuite" ] && panic_suite="$panic_suite/$panic_subsuite"   
+
+    # Add finished test case to runtime skipping test file
+    testcase=$(echo "$panic_suite $panic_test" | sed 's#\/#\\\/#g')
+    cat $RUNTIME_TESTFILE | sed -n "1,/$testcase/p" >>  $RUNTIME_SKIPFILE
+
+    # Add panic test case to test skipping report
+    printf "%-60s %-11s %s \n" "$panic_suite $panic_test" SKIP "system panic" >> $SKIPTEST
+
+    # Back up the last rutime log as resume file
+    mv $RUNTIME_LOGFILE $RESUME_LOGFILE 
+
+fi
+
+    # Fliter out the skipping test case to create runtime test execution file
+     grep -v -f $RUNTIME_SKIPFILE $RUNTIME_TESTFILE > $tmpfile 2>/dev/null
+     mv $tmpfile $RUNTIME_TESTFILE
+}
+
+report()
+{
+    [ -f $RUNTIME_LOGFILE ] || exit 1
+
+    if [ "$RUN_RESUME_TEST" -eq 1  ]; then
+        cat $RUNTIME_LOGFILE >> $RESUME_LOGFILE
+	cp $RESUME_LOGFILE $RUNTIME_LOGFILE
+    fi
+
+    # Create the final POSIX test report
+
+    pass_num=$(grep -c "execution: PASS" $RUNTIME_LOGFILE)
+    fail_num=$(grep -c "execution: FAILED" $RUNTIME_LOGFILE)
+    untested_num=$(grep -c "execution: UNTESTED" $RUNTIME_LOGFILE)
+    unresolved_num=$(grep -c "execution: UNRESOLVED" $RUNTIME_LOGFILE)
+    unsupported_num=$(grep -c "execution: UNSUPPORTED" $RUNTIME_LOGFILE)
+    hung_num=$(grep -c "execution: HUNG" $RUNTIME_LOGFILE)
+
+    total_number=$(expr $pass_num + $fail_num + $untested_num + $unresolved_num + $unsupported_num + $hung_num)
+    hostname=$(hostname)
+    cpu_arch=$(uname -m)
+    kernel_version=$(uname -r)
+
+    cat $RUNTIME_LOGFILE > $POSIX_LOGFILE
+    echo "Total Pass: $pass_num"                  >> $POSIX_LOGFILE
+    echo "Total Fail: $fail_num"                  >> $POSIX_LOGFILE
+    echo "Total Untested: $untested_num"          >> $POSIX_LOGFILE
+    echo "Total Unresolved: $unresolved_num"      >> $POSIX_LOGFILE
+    echo "Total Unsupported: $unsupported_num"    >> $POSIX_LOGFILE
+    echo "Total Hung: $hung_num"                  >> $POSIX_LOGFILE
+    echo "Total Tests: $total_number"             >> $POSIX_LOGFILE
+    echo "Kernel Version: $kernel_version"        >> $POSIX_LOGFILE
+    echo "Machine Architecture: $cpu_arch"        >> $POSIX_LOGFILE
+    echo "Hostname: $hostname"                    >> $POSIX_LOGFILE
+
+    # Create the failed test report based on data base fail reason
+    cat $RUNTIME_LOGFILE | sed -n '1,2p' > $FAIL_REPORT
+    printf "%-60s %-21s %s \n" Testcase Type "Fail Reason" >> $FAIL_REPORT
+    printf "%-60s %-21s %s \n" -------- ----  -----------  >> $FAIL_REPORT
+
+    while read line
+    do
+        if echo $line | grep -E -q 'execution: FAILED|execution: UNTESTED|execution: UNRESOLVED|execution: UNSUPPORTED|execution: HUNG'; then
+            fail_suite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{print $3}')
+            fail_subsuite=$(echo "$line" | awk '{print $1}' | awk -F"/" '{print $4}')
+            fail_test=$(echo "$line" | awk '{print $1}' | awk -F"/" '{printf $5}')
+        
+            if [ -n "$fail_test" ]; then
+                fail_suite="$fail_suite/$fail_subsuite"
+            else
+                fail_test="$fail_subsuite"
+            fi
+            fail_test=$(echo $fail_test | tr -d ":")
+            fail_type=$(echo "$line" | awk '{print $3}'| tr -d ":")
+
+            fail_reason=$(cat $FAIL_PATH/common | grep "^#std .*$fail_suite $fail_test" | cut -d "|" -f 2)
+            [ -z "$fail_reason" -a -n "$KERNEL_ARCH" ] && \
+            fail_reason=$(cat $FAIL_PATH/common | grep "^#$KERNEL_ARCH .*$fail_suite $fail_test" | cut -d "|" -f 2)
+	    [ -z "$fail_reason" ] && UNKNOWN_FAILURE=1
+	    printf "%-60s %-20s %s \n" "$fail_suite/$fail_test" "$fail_type" "$fail_reason" >> $FAIL_REPORT
+        fi
+    done < $RUNTIME_LOGFILE
+
+[ "$UNKNOWN_FAILURE" -eq 1 ] && echo "Posix test has unknown failure"
+    # Create the skipping test report
+    cp $SKIPTEST  $SKIP_REPORT
+
+    cat <<-EOF >&2
+
+Posix Test Finished
+Posix Test Result:
+
+1. The report of Posix test : $POSIX_LOGFILE
+2. The list of skipped test case : $SKIP_REPORT
+3. The list of failed test case : $FAIL_REPORT
+
+	EOF
+}
+
+main()
+{
+    export LOGFILE=$RUNTIME_LOGFILE
+
+    if [ "$RUN_RESUME_TEST" -eq 0 ]; then
+        echo "POSIX Test Start Time: $START_TIME" > $RUNTIME_LOGFILE
+        echo "-------------------------------------------" >> $RUNTIME_LOGFILE
+    fi
+
+    cat $RUNTIME_TESTFILE | while read line
+    do
+        folder=$(echo  ${line} | cut -d " " -f 1)
+        testcase=$(echo  ${line} | cut -d " " -f 2)
+        cd $POSIXROOT/$folder 
+        $POSIXROOT/bin/run-tests.sh $folder $testcase
+    done
+    echo "-------------------------------------------" >> $RUNTIME_LOGFILE
+    echo "POSIX Test Finish" >> $RUNTIME_LOGFILE
+}
+
+while getopts hRf:s:t: arg
+    do  case $arg in
+        f)  SCENARIO_GROUP_LIST="$OPTARG";;
+        s)  RUN_SELECTED_SUITE=1
+            TESTSUITE_LIST="$OPTARG";;
+        t)  RUN_SELECTED_CASE=1
+            TESTCASE_LIST="$OPTARG";;
+        h)  usage
+            exit 0;;
+        R)  RUN_RESUME_TEST=1;;
+        esac
+    done
+
+check
+
+setup
+
+main
+
+report
+
+[ "$UNKNOWN_FAILURE" -eq 1 ] && exit 1
+exit 0
-- 
1.7.11

