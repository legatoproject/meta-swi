On newer GNU/Linux systems, the memfd_create function is no longer
declared in the <sys/memfd.h> header. Rather, it is exposed via
the <sys/mman.h> header, as a GNU extension enabled by _GNU_SOURCE.

This patch updates QEmu's configure test to try looking for this
function in the new <sys/mman.h> location first, and then fall
back on <sys/memfd.h>.  The name of the successful header is then
passed down via the new CONFIG_MEMFD_HEADER configuration variable
so that the relevant C code can do #include CONFIG_MEMFD_HEADER.

Index: qemu-2.7.0/configure
===================================================================
--- qemu-2.7.0.orig/configure
+++ qemu-2.7.0/configure
@@ -3647,19 +3647,20 @@ fi
 
 # check if memfd is supported
 memfd=no
-cat > $TMPC << EOF
-#include <sys/memfd.h>
+for memfd_header in '<sys/mman.h>' '<sys/memfd.h>' ; do
+  cat > $TMPC << EOF
+#include $memfd_header
 
 int main(void)
 {
     return memfd_create("foo", MFD_ALLOW_SEALING);
 }
 EOF
-if compile_prog "" "" ; then
-  memfd=yes
-fi
-
-
+  if compile_prog "" "" ; then
+    memfd=yes
+    break
+  fi
+done
 
 # check for fallocate
 fallocate=no
@@ -5093,6 +5094,7 @@ if test "$eventfd" = "yes" ; then
 fi
 if test "$memfd" = "yes" ; then
   echo "CONFIG_MEMFD=y" >> $config_host_mak
+  echo "CONFIG_MEMFD_HEADER=$memfd_header" >> $config_host_mak
 fi
 if test "$fallocate" = "yes" ; then
   echo "CONFIG_FALLOCATE=y" >> $config_host_mak
Index: qemu-2.7.0/util/memfd.c
===================================================================
--- qemu-2.7.0.orig/util/memfd.c
+++ qemu-2.7.0/util/memfd.c
@@ -32,7 +32,7 @@
 #include "qemu/memfd.h"
 
 #ifdef CONFIG_MEMFD
-#include <sys/memfd.h>
+#include CONFIG_MEMFD_HEADER
 #elif defined CONFIG_LINUX
 #include <sys/syscall.h>
 #include <asm/unistd.h>
