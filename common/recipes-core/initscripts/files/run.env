#
# Run-time Yocto platform environment. This file should be sourced.
#

# Make sure path is correctly set.
export PATH=$PATH:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin

# Set some important global variables.
SWI_OK=0
SWI_ERR=1
SWI_TRUE=1
SWI_FALSE=0

# Shell scripts do not return negative number, here define a number as
# the error return for some special purpose.
# Please make sure the return value of your function will not covered
# by this number before you are going to use this define.
SWI_ERR_MAX=255

# Mount point for flash partition used by Legato and UFS.
FLASH_MOUNTPOINT=/mnt/flash

# Mount point for legato flash partition
FLASH_MOUNTPOINT_LEGATO=/mnt/legato

# UFS root
UFS_ROOT=${FLASH_MOUNTPOINT}/ufs

# UNIONFS type
UFS_T=overlay

# Name of this executable.
this_e=$( /usr/bin/basename $0 )

#
# Helper functions
#

# Logger. Call it as:
#    swi_log "This is the system log."
swi_log()
{
    echo "${this_e}: $1" | tee /dev/console | logger
}

# constants to use with log_kernel for lev argument.
kern_emerg=0
kern_alert=1
kern_crit=2
kern_err=3
kern_warning=4
kern_notice=5
kern_info=6
kern_debug=7

# Log via kernel log from user space.
# Syntax: <level> <printf-format-string> <args>....
#         $1      $2                     $3 . ...
kern_log()
{
    local lev=$1
    local fmt=$2
    local pct=$(printf "%s" "$fmt" | sed -e s/%%//g -e s/[^%]//g)

    if [ $# -lt 2 ] ; then
        printf "kern_log: need at least two arguments%s\n" "$fmt"
        return 1
    fi

    case $lev in
      [0-7] )
        ;;
      * )
        printf "kern_log: %s is not a valid kernel log level\n" "$lev"
        return 1
        ;;
    esac

    shift; shift

    if [ ${#pct} -ne $# ] ; then
        printf "kern_log: mismatched format string and arguments\n" "$fmt"
        return 1
    fi

    printf "<%s>$fmt" $lev "$@" > /dev/kmsg
}

# Returns SWI_TRUE if unionfs should fudge rootfs.
is_fudge_ro_rootfs_allowed()
{
    local ret=${SWI_FALSE}
    local A=$( cat /proc/cmdline | grep -oe "fudge_ro_rootfs=\S*" )
    if [ "x${A}" == "xfudge_ro_rootfs=true" ] ; then
        ret=${SWI_TRUE}
    elif [ "x${A}" == "xfudge_ro_rootfs=false" ] ; then
        ret=${SWI_FALSE}
    else
        # Allow mount if rootfs is RO and flash mountpoint is RW
        local rootfs_ro=`mount | grep " on / " | grep -w ro`
        local flashfs_rw=`mount | grep " on $FLASH_MOUNTPOINT " | grep -w rw`
        if [ -z rootfs_ro ] || [ -z flashfs_rw ] ; then
            ret=${SWI_FALSE}
        else
            ret=${SWI_TRUE}
        fi
    fi

    if [ $ret -eq ${SWI_TRUE} ] ; then
        swi_log "RO rootfs fudge allowed."
    else
        swi_log "RO rootfs fudge NOT allowed."
    fi

    return ${ret}
}

# Returns SWI_TRUE if unionfs should mount the RW overlay on /etc
is_etc_overlay_disabled()
{
    local ret=${SWI_FALSE}
    local A=$( cat /proc/cmdline | grep -oe "ima_appraise=\S*" )
    if [ "x${A}" == "xima_appraise=enforce" ] ; then
        ret=${SWI_TRUE}
    fi

    if [ $ret -eq ${SWI_TRUE} ] ; then
        swi_log "Overlay over /etc is NOT allowed."
    else
        swi_log "Overlay over /etc is allowed"
    fi

    return ${ret}
}

# Wait until file shows up. Note that this will wait on any file and there
# will be no distinction between regular or device file. While covering wide
# range of cases, we may need to restrict this to device files in the future.
# Limit the time spent here to about 3 sec. If file does not show up for 3 sec.
# it will probably never show up.
# Note that the original max waiting time is 1 sec, now change to 3 sec because
# we found that in system reboot stress test, the ubi device cannot be generated
# within 1 sec occasionally after doing ubiattach.
wait_on_file()
{
    local cntmax=150
    local ret=${SWI_OK}

    while [ ! -e "$1" ] ; do
        usleep 20000
        cntmax=$( echo $(( ${cntmax} - 1 )) )
        if [ ${cntmax} -eq 0 ] ; then
            ret=${SWI_ERR}
            break
        fi
    done

    return ${ret}
}

# Determine if SMACK is enabled.
is_legato_smack_enabled()
{
    local ret=${SWI_OK}

    # Case if /legato is already mounted (after legato init)
    if [ -e "/legato/SMACK_DISABLED" ]; then
        ret=${SWI_ERR}
    # Case if /legato is not mounted yet and we need to determine if we should run
    # with SMACK or not
    elif [ ! -e "/legato/systems" ]; then
        if [ -e "${FLASH_MOUNTPOINT}/legato/SMACK_DISABLED" ]; then
            # RW case
            ret=${SWI_ERR}
        elif [ ! -e "${FLASH_MOUNTPOINT}/legato/systems" ] &&
             [ -e "${FLASH_MOUNTPOINT_LEGATO}/SMACK_DISABLED" ]; then
            # RO case or first boot
            ret=${SWI_ERR}
        fi
    fi

    return ${ret}
}

#
# Determine if /etc overlay is mounted and writable. If it is, it will return
# SWI_OK .
#
is_etc_writable()
{
    local ret=${SWI_ERR}

    if mount | grep " on /etc type " | grep -wq rw; then
        ret=${SWI_OK}
    fi

    return ${ret}
}

#
# Determine if /mnt/flash is mounted and writable.
#
is_flash_mountpoint_writable()
{
    local ret=${SWI_ERR}

    if mount | grep " on ${FLASH_MOUNTPOINT} type " | grep -wq rw; then
        ret=${SWI_OK}
    fi

    return ${ret}
}

# Determine if we need to do bind mounting mounting of Nagger related files.
# Bindmounting of these files is required, if /etc is nor writeable.
# It will return SWI_OK, if bind mounting is required.
is_bindmount_nagger_files()
{
    local ret=${SWI_OK}

    # Do nothing if /etc is writable.
    if is_etc_writable; then
        return ${SWI_ERR}
    fi

    # If /mnt/flash is not writable there is no point to try to do bind
    # mounting.
    if ! is_flash_mountpoint_writable; then
        return ${SWI_ERR}
    fi

    return $ret;
}
