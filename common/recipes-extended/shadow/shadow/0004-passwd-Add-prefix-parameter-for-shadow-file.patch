From 86435279aa6460d30d7504ab9527c9e295064d71 Mon Sep 17 00:00:00 2001
From: Dragan Marinkovic <dmarinkovi@sierrawireless.com>
Date: Thu, 24 Oct 2019 19:08:17 -0700
Subject: [PATCH] passwd: Add prefix parameter for shadow file

By adding '-p' parameter, we can place shadow file
anywhere we like. The only restriction is that
path must end with etc/shadow. Example:

    passwd -p /var/test

would change password in shadow file at /var/test/etc/shadow

Without '-p' passwd behaves the same way it normally
does.

Note that all other parameters would come from /etc (e.g. username
would come from /etc/passwd file). If shadow file could not be
found, passwd utility would update /etc/passwd file on the fly,
without any warning.

Signed-off-by: Dragan Marinkovic <dmarinkovi@sierrawireless.com>
---
 lib/shadow.c |  2 +-
 src/passwd.c | 89 +++++++++++++++++++++++++++++++++++++++++-----------
 2 files changed, 72 insertions(+), 19 deletions(-)

diff --git a/lib/shadow.c b/lib/shadow.c
index 05cb0e4..8c78176 100644
--- a/lib/shadow.c
+++ b/lib/shadow.c
@@ -99,7 +99,7 @@ void setspent (void)
 	if (NULL != shadow) {
 		rewind (shadow);
 	}else {
-		shadow = fopen (SHADOW_FILE, "r");
+		shadow = fopen (spw_dbname(), "r");
 	}
 
 #ifdef	USE_NIS
diff --git a/src/passwd.c b/src/passwd.c
index 3424f3b..2100675 100644
--- a/src/passwd.c
+++ b/src/passwd.c
@@ -67,6 +67,12 @@
 #define E_MISSING	4	/* unexpected failure, passwd file missing */
 #define E_PWDBUSY	5	/* passwd file busy, try again later */
 #define E_BAD_ARG	6	/* invalid argument to option */
+
+/*
+ * Macros
+*/
+#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))
+
 /*
  * Global variables
  */
@@ -132,6 +138,7 @@ static bool do_update_pwd = false;
 
 /* local function prototypes */
 static /*@noreturn@*/void usage (int);
+static int set_shadow_filename(char *);
 
 #ifndef USE_PAM
 static bool reuse (const char *, const struct passwd *);
@@ -183,6 +190,7 @@ static /*@noreturn@*/void usage (int status)
 	(void) fputs (_("  -w, --warndays WARN_DAYS      set expiration warning days to WARN_DAYS\n"), usageout);
 	(void) fputs (_("  -x, --maxdays MAX_DAYS        set maximum number of days before password\n"
 	                "                                change to MAX_DAYS\n"), usageout);
+	(void) fputs (_("  -p, --shadow-prefix PATH      set shadow file prefix path (PATH/etc/shadow)\n"), usageout);
 	(void) fputs ("\n", usageout);
 	exit (status);
 }
@@ -330,7 +338,7 @@ static int new_password (const struct passwd *pw)
 
 		/*
 		 * If enabled, warn about weak passwords even if you are
-		 * root (enter this password again to use it anyway). 
+		 * root (enter this password again to use it anyway).
 		 * --marekm
 		 */
 		if (amroot && !warned && getdef_bool ("PASS_ALWAYS_WARN")
@@ -758,6 +766,42 @@ static int check_selinux_access (const char *changed_user,
 
 #endif				/* WITH_SELINUX */
 
+/*
+ * Set alternate shadow file full path. If everything is OK, it will return 0.
+ */
+int set_shadow_filename(char *fn)
+{
+	int max_sz = 0;
+	int sz = 0;
+	/* We do not want to place this large buffer on stack. */
+	static char buff[FIELD_SIZEOF(struct commonio_db, filename)];
+
+
+	if (NULL == fn) {
+        fprintf (stderr,
+                 _("%s: Cannot set new shadow filename, no input.\n"),
+                 Prog);
+		return 1;
+	}
+
+	/* Max size of filename string to concatenate SHADOW_FILE to:
+	 * storage - SHADOW_FILE len - 1 byte for NULL character
+	 */
+	max_sz = FIELD_SIZEOF(struct commonio_db, filename) - (sizeof(SHADOW_FILE) - 1) - 1;
+
+	/* We do not care what's beyond max len. */
+	sz = strnlen(fn, max_sz);
+
+	/* Change shadow file name. We can trust hard-coded SHADOW_FILE length. We,
+	   need "+ 1" because of the way how snprintf operates (look at the man
+	   pages). */
+	snprintf(buff, sz + 1, "%s", fn, NULL);
+	strcat(buff, SHADOW_FILE);
+	(void)spw_setdbname(buff);
+
+	return 0;
+}
+
 /*
  * passwd - change a user's password file information
  *
@@ -780,6 +824,8 @@ static int check_selinux_access (const char *changed_user,
  *	-u	unlock the password of the named account (*)
  *	-w #	set sp_warn to # days (*)
  *	-x #	set sp_max to # days (*)
+ *	-p 	Set shadow file prefix path, so utils are searching for it at:
+ *			PATH/etc/shadow
  *
  *	(*) requires root permission to execute.
  *
@@ -825,25 +871,26 @@ int main (int argc, char **argv)
 		 */
 		int c;
 		static struct option long_options[] = {
-			{"all",         no_argument,       NULL, 'a'},
-			{"delete",      no_argument,       NULL, 'd'},
-			{"expire",      no_argument,       NULL, 'e'},
-			{"help",        no_argument,       NULL, 'h'},
-			{"inactive",    required_argument, NULL, 'i'},
-			{"keep-tokens", no_argument,       NULL, 'k'},
-			{"lock",        no_argument,       NULL, 'l'},
-			{"mindays",     required_argument, NULL, 'n'},
-			{"quiet",       no_argument,       NULL, 'q'},
-			{"repository",  required_argument, NULL, 'r'},
-			{"root",        required_argument, NULL, 'R'},
-			{"status",      no_argument,       NULL, 'S'},
-			{"unlock",      no_argument,       NULL, 'u'},
-			{"warndays",    required_argument, NULL, 'w'},
-			{"maxdays",     required_argument, NULL, 'x'},
+			{"all",           no_argument,       NULL, 'a'},
+			{"delete",        no_argument,       NULL, 'd'},
+			{"expire",        no_argument,       NULL, 'e'},
+			{"help",          no_argument,       NULL, 'h'},
+			{"inactive",      required_argument, NULL, 'i'},
+			{"keep-tokens",   no_argument,       NULL, 'k'},
+			{"lock",          no_argument,       NULL, 'l'},
+			{"mindays",       required_argument, NULL, 'n'},
+			{"quiet",         no_argument,       NULL, 'q'},
+			{"repository",    required_argument, NULL, 'r'},
+			{"root",          required_argument, NULL, 'R'},
+			{"status",        no_argument,       NULL, 'S'},
+			{"unlock",        no_argument,       NULL, 'u'},
+			{"warndays",      required_argument, NULL, 'w'},
+			{"maxdays",       required_argument, NULL, 'x'},
+			{"shadow-prefix", required_argument, NULL, 'p'},
 			{NULL, 0, NULL, '\0'}
 		};
 
-		while ((c = getopt_long (argc, argv, "adehi:kln:qr:R:Suw:x:",
+		while ((c = getopt_long (argc, argv, "adehi:kln:qr:R:Suw:x:p:",
 		                         long_options, NULL)) != -1) {
 			switch (c) {
 			case 'a':
@@ -934,6 +981,12 @@ int main (int argc, char **argv)
 				xflg = true;
 				anyflag = true;
 				break;
+			case 'p':
+				/* Update shadow filename. */
+				if ( set_shadow_filename(optarg) != 0 ) {
+					usage (E_BAD_ARG);
+				}
+				break;
 			default:
 				usage (E_BAD_ARG);
 			}
@@ -1096,7 +1149,7 @@ int main (int argc, char **argv)
 		STRFCPY (crypt_passwd, cp);
 
 		/*
-		 * See if the user is permitted to change the password. 
+		 * See if the user is permitted to change the password.
 		 * Otherwise, go ahead and set a new password.
 		 */
 		check_password (pw, sp);
-- 
2.20.1

