From 872a24db1ad0e06f8064730ed1fdd18ffc18f642 Mon Sep 17 00:00:00 2001
From: Yan Kong <ykong@sierrawireless.com>
Date: Mon, 25 Jul 2016 14:39:31 +0800
Subject: [PATCH] Workaround to bring up alx by fallbacking to LE.2.0 driver

---
 drivers/net/ethernet/atheros/alx/alx_main.c | 168 +++++-----------------------
 1 file changed, 25 insertions(+), 143 deletions(-)

diff --git a/drivers/net/ethernet/atheros/alx/alx_main.c b/drivers/net/ethernet/atheros/alx/alx_main.c
index e4a3be4..f90e03f 100755
--- a/drivers/net/ethernet/atheros/alx/alx_main.c
+++ b/drivers/net/ethernet/atheros/alx/alx_main.c
@@ -70,13 +70,10 @@ static int alx_open_internal(struct alx_adapter *adpt, u32 ctrl);
 static void alx_stop_internal(struct alx_adapter *adpt, u32 ctrl);
 static void alx_init_ring_ptrs(struct alx_adapter *adpt);
 static int alx_ipa_rm_try_release(struct alx_adapter *adpt);
-static int alx_ipa_setup_rm(struct alx_adapter *adpt);
 
 #ifdef MDM_PLATFORM
 /* Global CTX PTR which can be used for debugging */
 static struct alx_adapter *galx_adapter_ptr = NULL;
-static  s8 debugfs_ipa_enable = 1;
-const mode_t read_write_mode = S_IRUSR | S_IRGRP | S_IROTH | S_IWUSR | S_IWGRP;
 
 static inline char *alx_ipa_rm_state_to_str(enum alx_ipa_rm_state state)
 {
@@ -1169,9 +1166,7 @@ static bool alx_handle_tx_irq(struct alx_msix_param *msix,
 		}
 
 		if (tpbuf->skb) {
-			/* Since its called by NAPI; we are already in bh
-			context; so its safe to free the skb here*/
-			dev_kfree_skb(tpbuf->skb);
+			dev_kfree_skb_irq(tpbuf->skb);
 			tpbuf->skb = NULL;
 		}
 
@@ -3279,14 +3274,6 @@ static int alx_shutdown_internal(struct pci_dev *pdev, bool *wakeup)
 	} else {
 		speed = ALX_LINK_SPEED_10_HALF;
 		link_up = false;
-		/* When link is  disabled and PHY/MAC not programmed at all
-		* Due to a suspected bug in HW, we dont get PHY UP interrupt
-		* As a solution, program the MAC/PHY with 10Mbps HD link speed
-		* even the there is no LINK Detected */
-		retval = hw->cbs.setup_phy_link(hw, speed, true,
-				!hw->disable_fc_autoneg);
-		if (retval)
-			return retval;
 	}
 	hw->link_speed = speed;
 	hw->link_up = link_up;
@@ -3347,8 +3334,8 @@ static int alx_suspend(struct device *dev)
 
 	if (alx_ipa_rm_try_release(adpt))
 		pr_err("%s -- ODU PROD Release unsuccessful \n",__func__);
-        else
-		adpt->palx_ipa->ipa_prod_rm_state = ALX_IPA_RM_RELEASED;
+	else
+		adpt->palx_ipa->ipa_prod_rm_state == ALX_IPA_RM_RELEASED;
 
 /*SWISTART*/
 #ifdef CONFIG_SIERRA
@@ -3627,7 +3614,7 @@ static void alx_link_task_routine(struct alx_adapter *adpt)
 
 #ifdef MDM_PLATFORM
 		/* Enable ODU Bridge */
-		if (alx_ipa->ipa_ready == true && CHK_ADPT_FLAG(2, ODU_INIT)) {
+		if (CHK_ADPT_FLAG(2, ODU_INIT)) {
 			ret = odu_bridge_connect();
 			if (ret)
 				pr_err("Could not connect to ODU bridge %d \n",
@@ -4033,7 +4020,6 @@ static netdev_tx_t alx_start_xmit_frame(struct alx_adapter *adpt,
 		/* no enough descriptor, just stop queue */
 		netif_stop_queue(adpt->netdev);
 		spin_unlock_irqrestore(&adpt->tx_lock, flags);
-		alx_err(adpt, "No TX Desc to send packet\n");
 		return NETDEV_TX_BUSY;
 	}
 
@@ -4303,67 +4289,6 @@ static void alx_ipa_tx_dl(void *priv, struct sk_buff *skb)
 	}
 }
 
-static void alx_ipa_ready_cb(struct alx_adapter *adpt)
-{
-	struct alx_ipa_ctx *alx_ipa = adpt->palx_ipa;
-        struct odu_bridge_params *params_ptr, params;
-	int retval = 0;
-	struct alx_hw *hw = &adpt->hw;
-        params_ptr = &params;
-
-	pr_info("%s:%d --- IPA is ready --- \n",__func__,__LINE__);
-        alx_ipa->ipa_ready = true;
-
-	/* Init IPA Resources */
-	if (alx_ipa_setup_rm(adpt)) {
-		pr_err("ALX: IPA Setup RM Failed \n");
-		return;
-	} else {
-		SET_ADPT_FLAG(2, IPA_RM);
-	}
-
-	/* Initialize the ODU bridge driver now: odu_bridge_init()*/
-	params_ptr->netdev_name = adpt->netdev->name;
-	params_ptr->priv = adpt;
-	params.tx_dp_notify = alx_ipa_tx_dp_cb;
-	params_ptr->send_dl_skb = (void *)&alx_ipa_tx_dl;
-	memcpy(params_ptr->device_ethaddr, adpt->netdev->dev_addr, ETH_ALEN);
-        /* The maximum number of descriptors that can be provided to a BAM at
-	* once is one less than the total number of descriptors that the buffer
-	* can contain. */
-	params_ptr->ipa_desc_size = (adpt->ipa_high_watermark + 1) *
-					sizeof(struct sps_iovec);
-	retval = odu_bridge_init(params_ptr);
-	if (retval) {
-		pr_err("Couldnt initialize ODU_Bridge Driver \n");
-		return;
-	} else {
-		SET_ADPT_FLAG(2, ODU_INIT);
-	}
-
-	/* Check for link phy state */
-	if (hw->link_up) {
-		/* Enable ODU Bridge */
-		if (CHK_ADPT_FLAG(2, ODU_INIT)) {
-			retval = odu_bridge_connect();
-			if (retval) {
-				pr_err("Could not connect to ODU bridge %d \n",
-					retval);
-				return;
-			} else {
-				SET_ADPT_FLAG(2, ODU_CONNECT);
-			}
-			spin_lock_bh(&alx_ipa->ipa_rm_state_lock);
-			if (alx_ipa->ipa_prod_rm_state == ALX_IPA_RM_RELEASED) {
-				spin_unlock_bh(&alx_ipa->ipa_rm_state_lock);
-				alx_ipa_rm_request(adpt);
-			} else {
-				spin_unlock_bh(&alx_ipa->ipa_rm_state_lock);
-			}
-		}
-	}
-}
-
 static ssize_t alx_ipa_debugfs_read_ipa_stats(struct file *file,
                 char __user *user_buf, size_t count, loff_t *ppos)
 {
@@ -4517,32 +4442,9 @@ static ssize_t alx_ipa_debugfs_disable_ipa(struct file *file,
 		/* Request for IPA Resources */
 		alx_ipa_rm_request(galx_adapter_ptr);
 	}
-        debugfs_ipa_enable = value;
 	return count;
 }
 
-static ssize_t alx_ipa_debugfs_disable_ipa_read(struct file *file,
-                char __user *user_buf, size_t count, loff_t *ppos)
-{
-	struct alx_adapter *adpt = file->private_data;
-	ssize_t ret_cnt;
-        char* buf = NULL;
-        unsigned int buf_len = 100;
-
-	if (unlikely(!adpt)) {
-		pr_err(" %s NULL Pointer \n",__func__);
-		return -EINVAL;
-	}
-	if (!CHK_ADPT_FLAG(2, DEBUGFS_INIT))
-		return 0;
-
-        buf = kzalloc(buf_len, GFP_KERNEL);
-        if ( !buf )
-           return -ENOMEM;
-        ret_cnt = scnprintf(buf, buf_len, "%d\n",debugfs_ipa_enable);
-        return simple_read_from_buffer(user_buf, count, ppos, buf, ret_cnt);
-}
-
 static const struct file_operations fops_ipa_stats = {
                 .read = alx_ipa_debugfs_read_ipa_stats,
                 .open = simple_open,
@@ -4552,7 +4454,6 @@ static const struct file_operations fops_ipa_stats = {
 
 static const struct file_operations fops_ipa_disable = {
                 .write = alx_ipa_debugfs_disable_ipa,
-                .read = alx_ipa_debugfs_disable_ipa_read,
                 .open = simple_open,
                 .owner = THIS_MODULE,
                 .llseek = default_llseek,
@@ -4566,7 +4467,7 @@ static int alx_debugfs_init(struct alx_adapter *adpt)
 
 	debugfs_create_file("stats", S_IRUSR, adpt->palx_ipa->debugfs_dir,
 					adpt, &fops_ipa_stats);
-	debugfs_create_file("ipa_enable", read_write_mode, adpt->palx_ipa->debugfs_dir,
+	debugfs_create_file("ipa_enable", S_IWUSR, adpt->palx_ipa->debugfs_dir,
 					adpt, &fops_ipa_disable);
 
 	return 0;
@@ -4944,7 +4845,6 @@ static int __devinit alx_init(struct pci_dev *pdev,
 	adpt->ipa_free_desc_cnt = ALX_IPA_SYS_PIPE_MAX_PKTS_DESC;
 	adpt->ipa_high_watermark = ALX_IPA_SYS_PIPE_MAX_PKTS_DESC;
 	adpt->ipa_low_watermark = ALX_IPA_SYS_PIPE_MIN_PKTS_DESC;
-	alx_ipa->ipa_ready = false;
 	spin_lock_init(&adpt->flow_ctrl_lock);
 	INIT_LIST_HEAD(&adpt->pend_queue_head);
 	INIT_LIST_HEAD(&adpt->free_queue_head);
@@ -4958,27 +4858,11 @@ static int __devinit alx_init(struct pci_dev *pdev,
 	adpt->msg_enable = ALX_MSG_DEFAULT;
 
 #ifdef MDM_PLATFORM
-	retval = ipa_register_ipa_ready_cb(alx_ipa_ready_cb, (void *)adpt);
-	if (retval < 0) {
-		if (retval == -EEXIST) {
-			pr_info("%s:%d -- IPA is Ready retval %d \n",
-					__func__,__LINE__,retval);
-			alx_ipa->ipa_ready = true;
-		} else {
-			pr_info("%s:%d -- IPA is Not Ready retval %d \n",
-					__func__,__LINE__,retval);
-			alx_ipa->ipa_ready = false;
-		}
-	}
-
-	if (alx_ipa->ipa_ready == true)
-	{
-		if (alx_ipa_setup_rm(adpt)) {
-			pr_err("ALX: IPA Setup RM Failed \n");
-			goto err_ipa_rm;
-		} else {
-			SET_ADPT_FLAG(2, IPA_RM);
-		}
+        if (alx_ipa_setup_rm(adpt)) {
+		pr_err("ALX: IPA Setup RM Failed \n");
+		goto err_ipa_rm;
+	} else {
+		SET_ADPT_FLAG(2, IPA_RM);
 	}
         if (alx_debugfs_init(adpt)) {
 		pr_err("ALX: Debugfs Init failed \n");
@@ -5216,24 +5100,22 @@ static int __devinit alx_init(struct pci_dev *pdev,
 
 #ifdef MDM_PLATFORM
 	/* Initialize the ODU bridge driver now: odu_bridge_init()*/
-	if (alx_ipa->ipa_ready == true) {
-		params_ptr->netdev_name = netdev->name;
-		params_ptr->priv = adpt;
-		params.tx_dp_notify = alx_ipa_tx_dp_cb;
-		params_ptr->send_dl_skb = (void *)&alx_ipa_tx_dl;
-		memcpy(params_ptr->device_ethaddr, netdev->dev_addr, ETH_ALEN);
-		/* The maximum number of descriptors that can be provided to a
-		 * BAM at once is one less than the total number of descriptors
-		 * that the buffer can contain. */
-		params_ptr->ipa_desc_size = (adpt->ipa_high_watermark + 1) *
+        params_ptr->netdev_name = netdev->name;
+	params_ptr->priv = adpt;
+	params.tx_dp_notify = alx_ipa_tx_dp_cb;
+	params_ptr->send_dl_skb = (void *)&alx_ipa_tx_dl;
+	memcpy(params_ptr->device_ethaddr, netdev->dev_addr, ETH_ALEN);
+        /* The maximum number of descriptors that can be provided to a BAM at
+	 * once is one less than the total number of descriptors that the buffer
+         * can contain. */
+	params_ptr->ipa_desc_size = (adpt->ipa_high_watermark + 1) *
 					sizeof(struct sps_iovec);
-		retval = odu_bridge_init(params_ptr);
-		if (retval) {
-			pr_err("Couldnt initialize ODU_Bridge Driver \n");
-			goto err_init_odu_bridge;
-		} else {
-			SET_ADPT_FLAG(2, ODU_INIT);
-		}
+	retval = odu_bridge_init(params_ptr);
+	if (retval) {
+		pr_err("Couldnt initialize ODU_Bridge Driver \n");
+		goto err_init_odu_bridge;
+	} else {
+		SET_ADPT_FLAG(2, ODU_INIT);
 	}
 
 	/* Initialize IPA Flow Control Work Task */
-- 
1.9.1

